{"componentChunkName":"component---src-templates-docs-js","path":"/cucumber","result":{"data":{"site":{"siteMetadata":{"title":"BDD Workshop | Tommy May III","docsLocation":""}},"mdx":{"fields":{"id":"219e48ea-dc42-5ae7-8655-cc164a405a6f","title":"Cucumber","slug":"/cucumber"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Cucumber\",\n  \"metaTitle\": \"Cucumber Overview\",\n  \"metaDescription\": \"Overview of cucumber and how it relates to BDD, user stories, and acceptance criteria\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Cucumber\"), mdx(\"p\", null, \"We have reviewed \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"bdd\"\n  }), \"BDD\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"user-stories\"\n  }), \"user stories\"), \", and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/f3f090683631783167ab5cb5e61ce77b/acceptance-criteria.md\"\n  }), \"acceptance criteria\"), \" at this point,\\nso where does \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://cucumber.io/docs/guides/overview/\"\n  }), \"Cucumber\"), \" fit in?\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Cucumber reads executable specifications written in plain text and validates that the software does what those specifications say.\")), mdx(\"p\", null, \"  \", \"-\", \" Cucumber.io\"), mdx(\"p\", null, \"Cucumber specifications are called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"scenarios\"), \" which are written in a set of grammar rules called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://cucumber.io/docs/guides/overview/#what-is-gherkin\"\n  }), \"Gherkin\"), \".\"), mdx(\"p\", null, \"i.e.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-gherkin\"\n  }), \"Feature: Late Payment Tenant List\\n  As a landlord\\n  I want a list of tenants that have not paid rent\\n  So that I can follow up with those tenants\\n\\n  Scenario: See First and Last Name\\n    Given a landlord is logged in\\n    When they look at the list of tenants who have not paid rent\\n    Then they should see the first and last name of everyone one the list\\n\\n  Scenario: List is Alphabetized By Last Name\\n    Given a landlord is logged in\\n    When they look at the list of tenants who have not paid rent\\n    Then the list should be alphabetized by last\\n\")), mdx(\"p\", null, \"These grammar rules of Gherkin should be written in a way that anybody can read them. It should not matter if you are a product\\nowner, developer, or QA engineer, the above language should make sense to you. These human readable specifications are\\ntaken by the developers and tests are written to make sure the software matches the specification. The underlying tests\\nwritten are called \\\"step definitions\\\", please see below.\"), mdx(\"h2\", null, \"Step Definitions\"), mdx(\"p\", null, \"Step definitions take the Gherkin specifications and connect them to the actual programming code.\"), mdx(\"p\", null, \"i.e.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"Given('a landlord is logged in', () => {\\n  client\\n   .url('https://example.com/login')\\n   .waitForElementVisible('body')\\n   .setValue('input[name=\\\"username\\\"]', 'landlord123')\\n   .setValue('input[name=\\\"password\\\"]', 'PasswordABC')\\n   .click('button[type=\\\"submit\\\"]')\\n   .env()\\n})\\n\")), mdx(\"h2\", null, \"Conclusion\"), mdx(\"p\", null, \"Knowing the above we can conclude that Cucumber is a tool to help us practice BDD by giving us a framework to take our\\nsoftware specifications and turn them into tests. These tests should help give our team confidence that the software is\\ndoing what we are asking of it. If we see passing tests we have a large degree of confidence that our specification is\\nworking as intended.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#cucumber","title":"Cucumber","items":[{"url":"#step-definitions","title":"Step Definitions"},{"url":"#conclusion","title":"Conclusion"}]}]},"parent":{"relativePath":"cucumber.md"},"frontmatter":{"metaTitle":"Cucumber Overview","metaDescription":"Overview of cucumber and how it relates to BDD, user stories, and acceptance criteria"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/acceptance-criteria","title":"Acceptance Criteria"}}},{"node":{"fields":{"slug":"/bdd","title":"Behavior-Driven Development Overview"}}},{"node":{"fields":{"slug":"/exercise","title":"Cucumber Exercise"}}},{"node":{"fields":{"slug":"/cucumber","title":"Cucumber"}}},{"node":{"fields":{"slug":"/","title":"BDD Workshop"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/user-stories","title":"User Stories"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"219e48ea-dc42-5ae7-8655-cc164a405a6f"}}}