{"componentChunkName":"component---src-templates-docs-js","path":"/user-stories","result":{"data":{"site":{"siteMetadata":{"title":"BDD Workshop | Tommy May III","docsLocation":""}},"mdx":{"fields":{"id":"746a5529-19b2-5fa9-8865-0f6d7659bd82","title":"User Stories","slug":"/user-stories"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"User Stories\",\n  \"metaTitle\": \"User Stories\",\n  \"metaDescription\": \"Overview of what user stories are and why they are useful\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"What is a User Story\"), mdx(\"p\", null, \"User stories are a method of capturing a feature in a simple description from the perspective of the person that needs\\nthe new feature.\"), mdx(\"p\", null, \"User stories usually come in the format:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-gherkin\"\n  }), \"As a _TYPE_OF_USER_\\nI want _SOMETHING_\\nSo that _RESULT OF SOMETHING_\\n\")), mdx(\"p\", null, \"i.e.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-gherkin\"\n  }), \"As a landlord\\nI want a list of tenants that have not paid rent\\nSo that I can follow up with those tenants\\n\")), mdx(\"p\", null, \"You can see above we didn't describe any specific instructions of how this should be implemented in the software. This is\\nintentional as these stories are meant to stay focused on the outcome not the implementation. We will talk about how we\\ndescribe implementation in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"./acceptance-criteria\"\n  }), \"acceptance criteria\"), \" section.\"), mdx(\"h1\", null, \"Who Writes User Stories\"), mdx(\"p\", null, \"Anyone can write a user story. It is up to the product owner to prioritize the user stories according to business needs.\\nA developer may write a user story to improve the experience of a checkout process but that doesn't mean it will be prioritized\\nby the product owner. Sometimes features work \\\"well enough\\\" for the business to have value and improving something would not\\nprovide enough value for it to be worth the business's time.\"), mdx(\"h1\", null, \"How Big Should Users Stories Be\"), mdx(\"p\", null, \"It can be tempting to have a user story such as:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-gherkin\"\n  }), \"As a landlord\\nI want to manage my tenants who have not paid rent\\nSo that I can make more money\\n\")), mdx(\"p\", null, \"The problem with the above user story is that there is no direct feature that can be gathered from it. In fact the \\\"managing of\\ntenants who have not paid rent\\\" is likely to include several different features such as:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-gherkin\"\n  }), \"As a landlord\\nI want to have emails go out to tenants who have not paid rent\\nSo that they will be reminded\\nAnd so that I will not have to remind them myself\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-gherkin\"\n  }), \"As a landlord\\nI want a list of tenants that have not paid rent\\nSo that I can follow up with those tenants\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-gherkin\"\n  }), \"As a landlord\\nI want to see the balance unpaid by tenants\\nSo that I have an idea of how behind a tenant is\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-gherkin\"\n  }), \"As a tenant\\nI want to receive reminders leading up to my due date\\nSo that I am not late on payments\\n\")), mdx(\"p\", null, \"The user stories we just wrote are much more actionable thant simply \\\"managing tenants who have not paid rent\\\". We call\\nthe big user stories like \\\"managing tenants who have not paid rent\\\" epics. Epics are user stories that are too big to deliver\\nin small increments. We want to break down these Epics into smaller stories to deliver value continuously. We should be able\\nto go live with the list of tenants who have not paid rent without having to deliver the other stories as well. This is\\nbecause each story \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"provides value\"), \" to somebody in our system, and by delivering that value we can get feedback which is\\noften the most important thing we can have.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"No business plan survives first contact with a customer\")), mdx(\"p\", null, \"  \", \"-\", \" Steve Blank\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#what-is-a-user-story","title":"What is a User Story"},{"url":"#who-writes-user-stories","title":"Who Writes User Stories"},{"url":"#how-big-should-users-stories-be","title":"How Big Should Users Stories Be"}]},"parent":{"relativePath":"user-stories.md"},"frontmatter":{"metaTitle":"User Stories","metaDescription":"Overview of what user stories are and why they are useful"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/acceptance-criteria","title":"Acceptance Criteria"}}},{"node":{"fields":{"slug":"/bdd","title":"Behavior-Driven Development Overview"}}},{"node":{"fields":{"slug":"/exercise","title":"Cucumber Exercise"}}},{"node":{"fields":{"slug":"/cucumber","title":"Cucumber"}}},{"node":{"fields":{"slug":"/","title":"BDD Workshop"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/user-stories","title":"User Stories"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"746a5529-19b2-5fa9-8865-0f6d7659bd82"}}}